#include<iostream>
#include<utility>
#include<map>
using namespace std;
typedef map<pair<int,int>,int>::iterator it;
const int H=200010;
map<pair<int,int>,int> m;
int n,glob;
int counter=1,tedad[H],par[H];

int findpar(int x){
	if(par[x]==-1){
		return x;
	}
	return par[x]=findpar(par[x]);
}

void merge(int x,int y){
	int g,h;
	g=findpar(x);
	h=findpar(y);
	if(g==h){
		cout<<glob<<endl;
		exit(0);
	}
	if(tedad[g]<tedad[h]){
		par[g]=h;
		tedad[h]+=tedad[g];
	}else{
		par[h]=g;
		tedad[g]+=tedad[h];
	}
}

int main(){
	memset(par,-1,sizeof par);
	scanf("%d",&n);
	pair<int ,int> p;
	int x1,x2,y1,y2;
	for(int i=1;i<=n;i++){
		it q;
		glob=i;
		scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
		p=make_pair(x1,y1);
		if(m.find(p)==m.end()){
			m.insert(make_pair(p,counter));
			tedad[counter]=1;
			counter++;
		}
		p=make_pair(x2,y2);
		if(m.find(p)==m.end()){
			m.insert(make_pair(p,counter));
			tedad[counter]=1;
			counter++;
		}
		merge(m[p],m[make_pair(x1,y1)]);
	}
	cout<<0<<endl;
	return 0;
}

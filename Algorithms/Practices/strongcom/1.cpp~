#include<iostream>
#include<vector>
using namespace std;
const int H=1100;
vector<int> out[H];
int a[H][H],n,m,f[H],head,mark[H],deg[H],b[H][H],stack[H],deg2[H];
void dfs(int x){
	mark[x]=1;
	for(int i=0;i<deg[x];i++){
		if(mark[a[x][i]]==0){
			dfs(a[x][i]);
		}
	}
	f[head++]=x;
}
void aksdfs(int x){
	mark[x]=1;
	for(int i=0;i<deg2[x];i++){
		if(mark[b[x][i]]==0){
			aksdfs(b[x][i]);
		}
	}
	stack[head++]=x;
}
bool cmp(const vector<int> &x,const vector<int> &y){
	return x[0]<y[0];
}
int main(){
	scanf("%d%d",&n,&m);
	int x,y;
	for(int i=0;i<m;i++){
		scanf("%d%d",&x,&y);
		a[x][deg[x]++]=y;
		b[y][deg2[y]++]=x;
	}
	for(int i=1;i<=n;i++){
		if(mark[i]==0){
			dfs(i);	
		}
	}
	memset(mark,0,sizeof mark);
	int tedad=0;
	reverse(f,f+n);
	for(int i=0;i<n;i++){
		if(mark[f[i]]==0){	
			head=0;
			aksdfs(f[i]);
			for(int i=0;i<head;i++){
				out[tedad].push_back(stack[i]);
			}
			tedad++;
		}
	}
	sort(out,out+tedad,cmp);
	cout<<tedad<<endl;
	for(int i=0;i<tedad;i++){
		for(int j=0;j<(int) out[i].size();j++){
			printf("%d ",out[i][j]);
		}
		printf("\n");
	}
	return 0;
}

#include<iostream>
#include<vector>
using namespace std;
const int H=1100,inf=1000000000;
vector<int> a[H][2],out;
int n,m,mark[H],smallest[H],len[H],par[H],p[H],stack[H],head,num;
vector<int> comp[H];
int dfs(int x){
	mark[x]=1;
	int temp;
	for(int i=0;i<(int)a[x][0].size();i++){
		temp=a[x][0][i];
		if(temp==par[x]){
			continue;
		}
		if(mark[temp]==0){
			len[temp]=len[x]+1;
			par[temp]=x;
			stack[head++]=temp;
			p[x]=head-1;
			if(dfs(temp)==1){
				while(head-1>=p[x]){
					comp[num].push_back(stack[head-1]);
					head--;
				}
				num++;
				out.push_back(a[x][1][i]);
			}else{
				smallest[x]=min(smallest[x],smallest[temp]);
			}
		}else{
			smallest[x]=min(smallest[x],len[temp]);
		}
	}
	if(smallest[x]==len[x] || smallest[x]==inf){
		return 1;
	}
	return 0;
}


int main(){
	scanf("%d%d",&n,&m);
	int x,y;
	for(int i=0;i<m;i++){
		scanf("%d%d",&x,&y);
		a[x][0].push_back(y);
		a[y][0].push_back(x);
		a[x][1].push_back(i+1);
		a[y][1].push_back(i+1);
	}
	for(int i=1;i<=n;i++){
		smallest[i]=inf;
	}
	for(int i=1;i<=n;i++){
		head=0;
		if(mark[i]==0){
			stack[head++]=i;
			dfs(i);
			p[i]=0;
			while(head-1>p[i]){
				comp[num].push_back(stack[head-1]);
				head--;
			}
			num++;
		}
	}
	sort(out.begin(),out.end());
	cout<<out.size()<<endl;
	for(int i=0;i<(int)out.size();i++){
		cout<<out[i]<<" ";
	}
	cout<<endl;
	for(int i=0;i<num;i++){
		for(int j=0;j<comp[i].size();j++){
			 cout<<comp[i][j]<<" ";
		}
		cout<<endl;
	}
	
	return 0;
}
		
